// Numbers
// 정수, 실수, 음의 정수, 2진수, 8진수, 16진수 모두 숫자타입
// 그 증명으로 2진수 65와 8진수 65는 === 의 결과가 true이다.

// Number 타입은 모두 실수로 처리된다.
// 1 === 1.0 => true


const temp = 0 === -0;
// temp => true 반환한다. 하지만?
const temp2 = Object.is(0, -0);
// temp2 => false를 반환한다. 이 차이는 무엇?

// Number의 특수 타입
// Infinity (10 / 0), (10 / -0)
// NaN(Not Of Number)
// typeof NaN => 'number' 가 나온당.

// 참고: 자바스크립트는 대소문자도 구별함
// NaN !== nan

// undefind
// null -> '의도적 부재' 를 명시할 때 사용
// 변수에 null을 할당하는 것은 이전에 참조하던 값을 더 이상 참조하지 않는다는 뜻.

// Symbol
// 다른 값과 '절대' 중복되지 않는 유일무이한 값.
// 관련 궁금해서 대충 더 미리 찾아봤음 (33장 참고)
/*
1. enum과 같은 값을 정의할 때, 유의미 하지 않은 값을 넣을 필요가 있을 때 사용
ex.)
const Direction = {
  UP: Symbol('up'),
  DOWN: Symbol('down'),
}
2. 객체의 프로퍼티 키로 사용한다.
  2-1. 심벌을 프로퍼티 키로 사용하면, keys()나 getOwnPropertyNames() 등으로 가져올 수 없어 은닉이 가능하다.

*/

// 데이터 타입의 의한 메모리 참조
// 변수에 할당한 값의 타입에 따라 메모리 공간을 잡아 할당해줌.
// Number => 8바이트
// 그럼 이런건 어디서 알아오나?? => 심벌 테이블 이라는 자료구조를 통해서 식별자에 바인딩된, 메모리 주소, 타입들, 스코프들을 다 관리함.

// *조금 다른얘기지만 영상에 나오는 내용 중 좋은 내용
// 메모리 주소에 값을 할당하고 그것을 참조해가는 것을 잊지 말자.

// 동적타입
// 변수는 선언이 아닌 할당할때 타입이 결정되고, 재할당에 의해 동적으로 변경될 수 있다.

// undefind 는 숫자로 타입 변환되지 않는다!!!!!!!!!!! null만 됌.

// 비교 연산자
// 동등 연산자인 == 은 타입변환이 필수적으로 들어가기 때문에 일치 비교 === 이 더 빠를 수 밖에 없다. (물론 차이는 뭐.... 거의 없다고 봐도 무방하다)

// NaN은 유일하게 자신과 일치하지 않는 값이다.
// NaN === NaN => false
// isNaN과 Number.isNaN 은 다르고, Number.isNaN이 정확한 판단을 해준다.

// 삼항 연산자의 첫번 째 피연산자는 결과가 boolean이 아니면 암묵적으로 boolean으로 형변환을 해준다(오!)

// 논리 연산자 중 !(NOT) 부정연산자는 언제나 boolean으로 값을 반환해주고 boolean이 아니면 타입변환을 일으켜준다.(오!)
// !0 => true / !'Hello' => false

// typeof 연산자는 null이 'object' 로 나오는 것 이외에는 머.. 특별한건 없다

// 추가적인 궁금했던 부분
/*
0 === -0 과 Object.is(0, -0)의 차이
기본적으로 === 연산자는 값이 평가되는 조건이 '타입과 값이 모두 같은가?' 이기 때문에,
음의 정수이든 정수인든 타입도 숫자형으로 동일하고, 값 또한 동일하기 때문에 true가 반환되는 것이 맞다.

반면에, Object.is()는?
https://medium.com/jung-han/js-2%ED%83%84-%EA%B7%B8%EB%A6%AC%EA%B3%A0-object-is-e58b72e90443
위 링크를 참고하자 ㅎㅎ

Symbol 타입은 가비리 컬렉터가 어떻게 잡는걸까?
-> Symbol로 호출할 때 암뭊거으로 래퍼 객체를 생성하는데, 여타 다른 아이들처럼
사용이 끝나면 가비지 컬렉션의 대상이 된다고 한다.

근데 생각해보니, 어차피 엔진자체에서는 얘가 은닉이든 접근할 수 없든 사용이 되고 있는지 없는지
판단이 가능했을텐데,, 왜,, 궁금했지,,?
*/